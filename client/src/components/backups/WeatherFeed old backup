import React, { useState, useEffect } from 'react';
import WeatherCard from './WeatherCard';
import LoaderFish from './LoaderFish';


const WeatherFeed = (props) => {
  
  const [ weatherData, setWeatherData ] = useState();
  const [fetchStatus, setFetchStatus] = useState({loading: true, error: false})

  useEffect(() => {
    const getForecast = async pos => {
      const forecastUrl = await fetch(`https://api.weather.gov/points/${pos.coords.latitude},${pos.coords.longitude}`)
        .then (res => res.json())
        .then (jsonData => {
          console.log(`JSON data:\n${jsonData}`);
          return jsonData.properties.forecast;
        })  
        .catch(error => {
          console.log(error);
          setFetchStatus({loading: false, error: true});
        });

        console.log(`forecast URL: ${forecastUrl}`)
        if (fetchStatus.error === false) {
          const forecast = await fetch(forecastUrl)
          .then (response => response.json())
          .then (jsonData => {
            console.log(JSON.stringify(jsonData));
            if (jsonData.properties && jsonData.properties.periods) {
              setFetchStatus({loading: false, error: false});
              setWeatherData([...jsonData.properties.periods]);
            } else {
              setFetchStatus({loading: false, error: true})
            }


          })
          .catch(error => {
            console.log(`error: ${error}`)
            setFetchStatus({loading: false, error: true});
          });    
        }
  
    };

    navigator.geolocation.getCurrentPosition(pos => {
      getForecast(pos);
    }, error => console.log(error));

  }, []);


  return (
    <div style={{ maxWidth: 400, margin: '0px auto'}}>
      {fetchStatus.loading && !fetchStatus.error && <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column'}}><LoaderFish/><h1>Loading forecast...</h1></div>}
      {fetchStatus.error && <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}><h1>Error loading forecast...</h1></div>}
      {weatherData && weatherData.slice(0,6).map(period => (
        <WeatherCard key={period.number} weatherImage={period.icon} forecastDay={period.name} shortForecast={period.shortForecast} forecastDescription={period.detailedForecast}/>
      ))}
    </div>
  );
};


export default WeatherFeed;