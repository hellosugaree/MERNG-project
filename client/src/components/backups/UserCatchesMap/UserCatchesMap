import React, { useContext, useEffect, useState, useRef, createRef, useCallback } from 'react';
import { DateTime, Interval } from 'luxon';
import { debounce } from 'lodash';
import { AuthContext } from '../../context/auth';
import { ModalContext } from '../../context/modal';
import { useQuery } from '@apollo/client';
import { useGoogleAutocomplete, useGoogleMap2 } from '../../utilities/hooks';
import { GET_CATCHES } from '../../gql/gql';
import CatchCard from '../../components/CatchCard';
import LoaderFish from '../../components/LoaderFish';
import Filters from './Filters';
import CreateCatchForm from '../../components/CreateCatchForm';
import ModalCreateCatchSuccess from '../../components/ModalCreateCatchSuccess';
import { generateFileDataArray, createMarkers, parseCoordinatesFromPlaceInput } from './helpers';
import '../../App.css';


  // generate refs for our catch cards
  function createCatchCardRefs(catches, catchCardRefs) {
    console.log('creating catch card refs');
    // clear previous refs
    catchCardRefs.current = {};
    // create a ref with key of the catch id
    catches.forEach(catchObj => {
      catchCardRefs.current[catchObj.id] = createRef();
    });
  }

  // create and set our species list to be used for species filters 
  const createSpeciesList = (catches) => {
    const species = [];
    // create list of unique species from catch cards
    catches.forEach(catchObj => {
      if (species.indexOf(catchObj.species) < 0) {
        species.push(catchObj.species);
      }
    });
    return species;
  };

// state to hold selected filters
const defaultFilters = {apply: false, isDefault: true, species: [], catchDate: 'ALL'};

const UserCatchesMap = () => {

// pass as a callback to our useGoogleAutocomplete hook to be run on place select

  const { user } = useContext(AuthContext);
  const { showCustomModal, closeModal } = useContext(ModalContext);

  const [highlightedCatch, setHighlightedCatch] = useState(null);
  const [showCreateCatch, setShowCreateCatch] = useState(false);
  // state to hold image data for 
  const [displayImageData, setDisplayImageData] = useState([]);

  // callback executed when map center changed, update currentMapCenter state to pass location to create catch form
  const debouncedSetCurrentMapCenter = useCallback(debounce(() => setCurrentMapCenter(mapRef.current.getCenter().toJSON()), 100,))

  // second null is getCenterFromMap
  const { loadMap, showInfoWindowInCenter, mapContainerRef, mapRef, infoWindowRef, center, apiStatus, mapLoaded } = useGoogleMap2({ showBasicControls: true, onCenterChangeCallback: debouncedSetCurrentMapCenter, showCenterMarker: showCreateCatch, defaultZoom: 4 });
  const { autocompleteInputRef, autocompleteRef, loadAutocomplete } = useGoogleAutocomplete(handlePlaceSelect);
  
  // array to store our catch markers as references so we can bind events to them and access them later
  // format: { id: <id of the catch>, marker: <the marker for that catch>}
  const catchMarkersRef = useRef([]);
  // ref for our catch cards so we can select and focus them
  // format: { id: <id of the catch>, ref: <ref for that card>}
  const catchCardRefs = useRef({});
  const markerClusterRef = useRef(null);
  const clusterMarkers = true;
  // an array for our species list, this will get populated from the useEffect when the catch data loads from server
  const [speciesList, setSpeciesList] = useState([]);

  const [filters, setFilters] = useState(defaultFilters);
  const [filteredCatches, setFilteredCatches] = useState([]);

  // state property that tracks map center via callback passed as props to our map component
  // value will be passed as prop to create catch form
  const [currentMapCenter, setCurrentMapCenter] = useState(center);
  
  // our query
  const { loading: loadingUserCatches, error: userCatchesError, data: userCatchesData } = useQuery(GET_CATCHES, {
    variables: { userId: user.id },
    //  fetchPolicy: 'cache-and-network'
    // fetchPolicy: 'cache-only'
    // onCompleted: ({ getCatches }) => {
    //   setFilteredCatches(getCatches);
    // }
  });

  function handlePlaceSelect() {
    // get the place the user selected
    const place = autocompleteRef.current.getPlace();
    if (place.geometry && place.geometry.location) {
      // const { lat, lng } = place.geometry.location;
      // center our map on selected place
      mapRef.current.setCenter(place.geometry.location);
      mapRef.current.setZoom(9);
    } else {
      // no place returned, see if the input is in decimal degrees
      const coordinates = parseCoordinatesFromPlaceInput(place);
      if (coordinates) {
        mapRef.current.setCenter(coordinates);
        mapRef.current.setZoom(10);
      } else {
        // display info window for invalid location
        const infoDivStyle = 'padding-bottom: 5px; font-size: 16px;'
        const infoJSX = `
          <div style='width: 400px'>
            <div style='${infoDivStyle}'><b>${place.name} not found</b></div>
            <div style='${infoDivStyle}'>Please select a suggested place from the dropdown</div>
            <div style='${infoDivStyle}'>Or enter gps coordinates in the coodinates field</div>                 
          </div>`;
        showInfoWindowInCenter(infoJSX, mapRef, infoWindowRef);
      }
    }
  };
  

  // once the api script is loaded load the map
  useEffect(() => {
    // console.log('map loading useEffect triggered')
    if (!mapLoaded && apiStatus.complete) {
      // console.log('map loading useEffect executed')
      loadMap();
      loadAutocomplete();
    }
  }, [mapLoaded, apiStatus.complete, loadAutocomplete, loadMap]);


  // useEffect for when we get data from query. This will trigger on initial data, and when we add a catch and the query updates
  useEffect(() => {
    if (userCatchesData && mapLoaded) { // don't trigger until map is loaded and we have query data
      // reset filter options
      setFilters(defaultFilters);
      // populate species list in state to generate species filter options
      const speciesList = createSpeciesList(userCatchesData.getCatches);
      setSpeciesList(speciesList);
      // set our filtered catches state value to the new data set
      setFilteredCatches(userCatchesData.getCatches);
      // create new catch card refs
      createCatchCardRefs(userCatchesData.getCatches, catchCardRefs);
      // generate new markers
      createMarkers(userCatchesData.getCatches, catchMarkersRef, infoWindowRef, mapRef, markerClusterRef, true, setHighlightedCatch)
    }
  }, [userCatchesData, mapLoaded, setFilteredCatches, setSpeciesList, catchCardRefs, catchMarkersRef, infoWindowRef, mapRef, markerClusterRef, setHighlightedCatch]);

  // add listener to close info windows 
  useEffect(() => {
    if(mapLoaded) {
      // window.google.maps.event.clearListeners(mapRef.current, 'click');
      mapRef.current.addListener('click', e => {
        if (infoWindowRef.current) {
          infoWindowRef.current.close();
        }
        // unhighlight catch
        setHighlightedCatch(null);
      });
      mapRef.current.addListener('zoom_changed', e => {
        if (infoWindowRef.current) {
          infoWindowRef.current.close();
        }
        // unhighlight catch
        setHighlightedCatch(null);
      });
    }
  }, [mapLoaded, mapRef, infoWindowRef, setHighlightedCatch]);


  // useEffect to scroll to the highlighted catch when it gets updated from marker click and display images in bottom bar if any
  useEffect(() => {
    if (highlightedCatch && Object.keys(catchCardRefs.current).length > 0) {
      // scroll to the highlighted catch
      const card = catchCardRefs.current[highlightedCatch].current;
      if (card) {
        card.scrollIntoView();
      }
      // console.log(card);
    }
  }, [highlightedCatch, catchCardRefs])


  // handler for when user clicks a catch card
  const handleCatchCardClick = (e, catchId) => {
    // e.preventDefault(); 
    // update state for highlighted catch
    setHighlightedCatch(catchId)
    // console.log(catchId);
    const marker = catchMarkersRef.current.find(marker => marker.catchId === catchId);
    if (marker) {
      mapRef.current.setZoom(13);
      window.google.maps.event.trigger( marker, 'click' );
    }
  };



  // update our filters object when the user clicks a filter
  const handleFilterClick = (e, property) => {
    // property is passed as an argument to the onClick handler from the filter button component
    // clear all filters 
    if (property === 'clear') {
      return setFilters({...defaultFilters, apply: true});
    }
    const valueToFilter = e.target.name;
    // handle species filters
    if (property === 'species') {
      // prevent a species filter click from closing the dropdown so the user can select multiple species
      e.stopPropagation();
      if (filters.species.indexOf(valueToFilter) > -1) {
        // species already being filtered, toggle it off
        console.log('found')
        let newSpeciesArray = filters.species.slice();
        console.log(filters.species.indexOf(valueToFilter))
        newSpeciesArray.splice(filters.species.indexOf(valueToFilter), 1);
        setFilters(prevFilters => ( { ...prevFilters, apply: true, species: newSpeciesArray} ));
      } else {
        setFilters(prevFilters => ({ ...prevFilters, apply: true, species: [...prevFilters.species, valueToFilter]}));
      }
    }
    if (property === 'catchDate') {
      // dont change filters if we click the same date so we dont refilter the data for no reason
      if (filters.catchDate !== e.target.name ){
        setFilters(prevFilters => ({ ...prevFilters, apply: true, catchDate: e.target.name }))
      }
    }
  }

  // useEffect to handle filtering catches when filters change
  useEffect(() => {
    console.log('filtering useeffect triggered');
    // check that apply is true to prevent running before user sets a filters
    if (filters.apply) {
      console.log('applying filters')
      let filteredData = [];
      // SPECIES FILTERS
      if (filters.species.length > 0) {
        console.log('applying species filters')
        userCatchesData.getCatches.forEach(catchObj => {
          // each catch against the species filter array and push species that match into the filtered data array
          if (filters.species.indexOf(catchObj.species) >-1) {
            filteredData.push(catchObj);
          }
        });
      } else {
        // no species filters, so pass all catch data onto the next set of filters
        filteredData = [...userCatchesData.getCatches];
      }
      // DATE FILTERS
      if (filters.catchDate === 'TODAY'){
        const now = new Date();
        filteredData = filteredData.filter(catchObj => {
          const catchDate = new Date(catchObj.catchDate);
          return (catchDate.getDate() === now.getDate() && catchDate.getMonth() === now.getMonth() && catchDate.getFullYear() === now.getFullYear());
        }); 
      }
      if (filters.catchDate === 'WEEK') {
        const now = DateTime.now();
        filteredData = filteredData.filter(catchObj => {
          const catchDate = DateTime.fromMillis(Date.parse(catchObj.catchDate));
          return (Interval.fromDateTimes(catchDate, now).toDuration('days').toObject().days <= 7);
        });
      }
      if (filters.catchDate === 'MONTH') {
        const now = DateTime.now();
        filteredData = filteredData.filter(catchObj => {
          const catchDate = DateTime.fromMillis(Date.parse(catchObj.catchDate));
          return (Interval.fromDateTimes(catchDate, now).toDuration('months').toObject().months <= 1);
        });
      }
      if (filters.catchDate === 'YEAR') {
        const now = DateTime.now();
        filteredData = filteredData.filter(catchObj => {
          const catchDate = DateTime.fromMillis(Date.parse(catchObj.catchDate));
          return (Interval.fromDateTimes(catchDate, now).toDuration('years').toObject().years <= 1);
        });
      }
      // set our default property so we know whether to activate the clear filters button, and set apply to false so we don't trigger refilter
      if (filters.species.length === 0 && filters.catchDate === 'ALL'){
        console.log('default')
        setFilters(prevFilters => ({ ...prevFilters, isDefault: true, apply: false }))
      } else {
        console.log('not default')
        setFilters(prevFilters => ({ ...prevFilters, isDefault: false, apply: false }))
      }
      // update our filtered catches state
      setFilteredCatches(() => filteredData);
      // TESTING, also added all dependencies after mapref
      console.log(filteredData);
      createMarkers(filteredData, catchMarkersRef, infoWindowRef, mapRef, markerClusterRef, clusterMarkers, setHighlightedCatch);
    }    
  }, [filters, setFilteredCatches, setFilters, userCatchesData, catchMarkersRef, mapRef, infoWindowRef, clusterMarkers, markerClusterRef, setHighlightedCatch ]);

  // toggle form, argument defaults to true, but when we toggle on successful catch log, we don't want to generate markers since new ones will be generated from the query update useffect
  const handleFormToggle = (generateMarkersFromFilteredData = true) => {
    // toggle form on
    if (!showCreateCatch) {
      catchMarkersRef.current = [];
      // toggle off clusters
      if (markerClusterRef.current) {
        markerClusterRef.current.clearMarkers();
      }
      // show instructions info window
      const infoDivStyle = 'padding-bottom: 10px; font-size: 18px;'
      const infoJSX = `
        <div style='width: 400px'>
          <div style='${infoDivStyle}'><b>How to use the map to log a catch</b></div>
          <div style='font-size: 16px;'>There are several ways to select your catch position:</div>
            <ul style='font-size: 16px; margin: 0px'>
              <li style='padding-top: 5px;'>Manually drag the map to positon your catch</li>                   
              <li style='padding-top: 5px;'>Use the search bar to find a location (e.g. "San Clemente Pier")</li>      
              <li style='padding-top: 5px;'>Use the search bar to enter GPS coordinates in decimal degrees (e.g. "33.419095, -117.62117") </li>
            </ul>                
        </div>`;
      showInfoWindowInCenter(infoJSX, mapRef, infoWindowRef);
      // add a single use listener to clear the instructions window when bounds change
      window.google.maps.event.addListenerOnce(mapRef.current, 'bounds_changed', () => infoWindowRef.current ? infoWindowRef.current.close() : null);
      } else {
        // events to run when form toggles off
        // clear selected image data that gets passed back to our form for the controlled value
        setDisplayImageData([]);
        // google autocomplete widget leaves a 1px tall div on top of map even when you hide the input, this will remove it
        const container = document.getElementsByClassName('pac-container');
        if (container) {
          for (let i = 0; i < container.length; i++) {
            container[i].remove();
          }
        }
        autocompleteInputRef.current.value = null;
        // // clear all catch card refs to force a remap
        // catchCardRefs.current = {};
        if (generateMarkersFromFilteredData) {
          createMarkers(filteredCatches, catchMarkersRef, infoWindowRef, mapRef, markerClusterRef, clusterMarkers, setHighlightedCatch);
        }
      }
    setShowCreateCatch(prevValue => !prevValue);
  };

  // pass to the form to run in update function after successful mutation
  const successfulCatchLogCallback = (catchObj) => {
    // toggle off create catch form without generating new markers since this will be automatically done from the query update useeffect
    handleFormToggle(false);
    showCustomModal(<ModalCreateCatchSuccess species={catchObj.species} />);
    setTimeout(() => closeModal(), 3000);
  }

  // callback passed to our form that gets file list for image upload selections
  const handleFileSelect = async images => {
    // convert to an array of image data and update the state used to display previews and pass back to our form for the controlled image data value
    const fileData = await generateFileDataArray(images);    
    setDisplayImageData(fileData);
  }


  const renderCards = () => {
    if (loadingUserCatches || !userCatchesData) {
      return (
        <div>
          <LoaderFish />
          <div style={{fontSize: 16, fontWeight: 'bold'}}>Loading catches</div>
        </div>
      );
    }

    return  filteredCatches.length > 0
        ? filteredCatches.map(thisCatch => 
          (<div key={thisCatch.id} ref={catchCardRefs.current[thisCatch.id]}>
            <CatchCard
              style={{margin: '10px 0px'}}
              hideMenu={true} 
              onClick={e => handleCatchCardClick(e, thisCatch.id)} 
              highlight={highlightedCatch===thisCatch.id}
              catch={thisCatch} 
            />
          </div>))
        : <span style={{fontSize: 16}}>No results with current filters</span>
  };


  return (
    <div className='fit' style={{overflowY: 'auto'}}>
      <div className='' style={{display: 'flex', width: '100%', minHeight: 620, height: 'calc(100% - 200px)', flexGrow: 1, paddingRight: 10}}>
        {/* MAP */}
        <div style={{position: 'relative', height: '100%', width: '100%' }} >
          <div id='map' ref={mapContainerRef} style={{display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 1}}>
          </div>
          {(apiStatus.loading || loadingUserCatches || userCatchesError) && (
              <div style={{zIndex: 100, position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>
                {(apiStatus.loading || loadingUserCatches) && <LoaderFish />}
                {apiStatus.loading && <div style={{fontSize: 16, fontWeight: 'bold', zIndex: 100}}>Loading Map...</div>}
                {loadingUserCatches && <div style={{fontSize: 16, fontWeight: 'bold', zIndex: 100}}>Loading Catches...</div>}
                {userCatchesError && <div style={{fontSize: 16, fontWeight: 'bold',  zIndex: 100}}>Sorry, failed to load catch data from server. Please try again later...</div>}
              </div>
            )}
          
          {mapLoaded && userCatchesData &&
            <button 
              onClick={handleFormToggle} 
              className='custom-map-control-button log-catch-map-button'
            >
              {showCreateCatch ? 'Cancel Log' : 'Log A Catch'}
            </button>
          }
          {/*AUTOCOMPLETE INPUT (only show when create catch form is shown) */}
            <input 
              ref={autocompleteInputRef} type='text' 
              placeholder='Search for a place to center map'
              style={{
                position: 'absolute',
                top: 80,
                left: '50%',
                transform: 'translateX(-50%)',
                display: showCreateCatch ? '' : 'none',
                width: 300,
                height: 35, 
                margin: 0,
                borderRadius: 5,
                zIndex: 100
              }}
            />
        </div>
        
        {/* RIGHT SIDE WITH CATCH CARDS AND FILTER OPTIONS */}
        <div style={{display: 'flex', flexDirection: 'column',}}>
          {/* CONTAINER FOR FILTER MENU*/}
          <div style={{paddingLeft: 10, display: 'flex'}}>
            {!showCreateCatch && filteredCatches && speciesList &&
              <Filters speciesList={speciesList} filters={filters} handleFilterClick={handleFilterClick} />
            }
          </div>
          {/* CONTAINER FOR CATCH CARDS*/}
          <div style={{padding: '0px 10px', marginTop: 20, width: 400, height: '100%', overflowY: 'auto'}}>
            {
              showCreateCatch 
                ? <CreateCatchForm imageData={displayImageData} handleFileSelect={handleFileSelect} onSuccessCallback={successfulCatchLogCallback} catchLocation={currentMapCenter} style={{ paddingTop: 10, paddingBottom: 10}} />
                : renderCards()
            }
          </div>
        </div>
      </div>
      {/* BOTTOM CONTAINER FOR IMAGE PREVIEWS */}
      <div style={{display: 'flex', width: '100%'}}>
        <div style={{height: 200, width: 100, flexGrow: 1, overflowY: 'hidden', overflowX: 'scoll', whiteSpace: 'nowrap', }}>
          {showCreateCatch && displayImageData.map((image, index) => <img key={index} src={image} alt='your catch' style={{maxHeight: 200, width: 'auto', display: 'inline-block'}} /> )}
        </div>
      </div>
      </div>
  );
};


export default UserCatchesMap;
